import { use } from '../utils';
import { TouchMixin } from '../mixins/touch';
import { ParentMixin } from '../mixins/relation';

var _use = use('index-bar'),
    sfc = _use[0],
    bem = _use[1];

export default sfc({
  mixins: [TouchMixin, ParentMixin('vanIndexBar')],
  props: {
    zIndex: {
      type: Number,
      "default": 1
    },
    indexList: {
      type: Array,
      "default": function _default() {
        var indexList = [];
        var charCodeOfA = 'A'.charCodeAt(0);

        for (var i = 0; i < 26; i++) {
          indexList.push(String.fromCharCode(charCodeOfA + i));
        }

        return indexList;
      }
    }
  },
  methods: {
    onClick: function onClick(event) {
      this.scrollToElement(event.target);
    },
    onTouchStart: function onTouchStart(event) {
      this.touchStart(event);
    },
    onTouchMove: function onTouchMove(event) {
      this.touchMove(event);

      if (this.direction === 'vertical') {
        /* istanbul ignore else */
        if (event.cancelable) {
          event.preventDefault();
        }

        var _event$touches$ = event.touches[0],
            clientX = _event$touches$.clientX,
            clientY = _event$touches$.clientY;
        var target = document.elementFromPoint(clientX, clientY);
        this.scrollToElement(target);
      }
    },
    scrollToElement: function scrollToElement(element, setActive) {
      if (!element) {
        return;
      }

      var index = element.dataset.index;

      if (!index) {
        return;
      }

      var match = this.children.filter(function (item) {
        return String(item.index) === index;
      });

      if (match[0]) {
        match[0].scrollIntoView();
        this.$emit('select', match[0].index);
      }
    },
    onTouchEnd: function onTouchEnd() {
      this.active = null;
    }
  },
  render: function render(h) {
    return h("div", {
      "class": bem()
    }, [h("div", {
      "class": bem('sidebar'),
      "style": {
        zIndex: this.zIndex
      },
      "on": {
        "click": this.onClick,
        "touchstart": this.onTouchStart,
        "touchmove": this.onTouchMove,
        "touchend": this.onTouchEnd,
        "touchcancel": this.onTouchEnd
      }
    }, [this.indexList.map(function (index) {
      return h("span", {
        "class": bem('index'),
        "attrs": {
          "data-index": index
        }
      }, [index]);
    })]), this.slots('default')]);
  }
});