'use strict';
var chalk = require('chalk');
var friendlySyntaxErrorLabel = 'Syntax error:';

function isLikelyASyntaxError(message) {
    return message.indexOf(friendlySyntaxErrorLabel) !== -1;
}

function formatMessage(message, isError) {
    var lines = message.split('\n');

    if (lines.length > 2 && lines[1] === '') {
        lines.splice(1, 1);
    }

    // `./~/css-loader!./~/postcss-loader!./src/App.css` => `./src/App.css`
    if (lines[0].lastIndexOf('!') !== -1) {
        lines[0] = lines[0].substr(lines[0].lastIndexOf('!') + 1);
    }

    lines = lines.filter(function (line) {
        // Webpack adds a list of entry points to warning messages:
        //  @ ./src/index.js
        return line.indexOf(' @ ') !== 0;
    });

    // line #0 is filename
    // line #1 is the main error message
    if (!lines[0] || !lines[1]) {
        return lines.join('\n');
    }

    if (lines[1].indexOf('Module not found: ') === 0) {
        lines = [
            lines[0],
            lines[1]
            .replace("Cannot resolve 'file' or 'directory' ", '')
            .replace('Cannot resolve module ', '')
            .replace('Error: ', '')
            .replace('[CaseSensitivePathsPlugin] ', ''),
        ];
    }

    if (lines[1].indexOf('Module build failed: ') === 0) {
        lines[1] = lines[1].replace(
            'Module build failed: SyntaxError:',
            friendlySyntaxErrorLabel
        );
    }

    var exportError = /\s*(.+?)\s*(")?export '(.+?)' was not found in '(.+?)'/;
    if (lines[1].match(exportError)) {
        lines[1] = lines[1].replace(
            exportError,
            "$1 '$4' does not contain an export named '$3'."
        );
    }

    lines[0] = chalk.inverse(lines[0]);

    message = lines.join('\n');

    message = message.replace(
        /^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm,
        ''
    ); // at ... ...:x:y

    return message.trim();
}

function formatWebpackMessages(json) {
    var formattedErrors = json.errors.map(function (message) {
        return formatMessage(message, true);
    });
    var formattedWarnings = json.warnings.map(function (message) {
        return formatMessage(message, false);
    });
    var result = {
        errors: formattedErrors,
        warnings: formattedWarnings,
    };
    if (result.errors.some(isLikelyASyntaxError)) {

        result.errors = result.errors.filter(isLikelyASyntaxError);
    }
    return result;
}

module.exports = formatWebpackMessages;