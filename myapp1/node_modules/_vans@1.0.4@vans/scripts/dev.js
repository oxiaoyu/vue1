'use strict';
process.env.NODE_ENV = 'development';
var detect = require('detect-port');
var cleanConsole = require('./tools/cleanConsole');
var DEFAULT_PORT = parseInt(process.env.PORT, 10) || 8082;
var chalk = require('chalk');
var prompt = require('./tools/prompt');
var webpack = require('webpack');
var config = require('../config/webpack.config.dev.js');
var devServerConfig = require('../config/webpack.config.devServer');
var WebpackDevServer = require('webpack-dev-server');
var formatWebpackMessages = require('./tools/formatWebpackMessages.js');
var httpProxyMiddleware = require('http-proxy-middleware');
var historyApiFallback = require('connect-history-api-fallback');
var addDevServerEntryPoints = require('./tools/addDevServerEntryPoints');
var path = require('path');


detect(DEFAULT_PORT).then((port) => {

    if (port === DEFAULT_PORT) {
        run(port);
        return;
    }

    if (process.stdout.isTTY) {
        cleanConsole();
        var question =
            chalk.yellow('Something is already running on port ' + DEFAULT_PORT + '.') +
            '\n\nWould you like to run the app on another port instead?';

        prompt(question, true).then(shouldChangePort => {
            if (shouldChangePort) {
                run(port);
            }
        });
    } else {
        console.log(chalk.red('Something is already running on port ' + DEFAULT_PORT + '.'));
    }
});

function run(port) {
    var protocol = process.env.HTTPS === 'true' ? "https" : "http";
    var host = process.env.HOST || 'localhost';
    setupCompiler(host, port, protocol);
    runDevServer(host, port, protocol);
}

var compiler;
var handler;

function setupCompiler(host, port, protocol) {
    devServerConfig.host = host;
    devServerConfig.https = protocol === "https";
    devServerConfig.port = port;
    addDevServerEntryPoints(config, devServerConfig);


    compiler = webpack(config, handler);

    compiler.plugin('invalid', function() {
        if (process.stdout.isTTY) {
            cleanConsole();
        }
        console.log('Compiling...');
    });

    var isFirstCompile = true;

    compiler.plugin('done', function(stats) {
        if (process.stdout.isTTY) {
            cleanConsole();
        }
        var messages = formatWebpackMessages(stats.toJson({}, true));
        var isSuccessful = !messages.errors.length && !messages.warnings.length;
        var showInstructions = isSuccessful && (process.stdout.isTTY || isFirstCompile);

        if (isSuccessful) {
            console.log(chalk.green('Compiled successfully!'));
        }

        if (showInstructions) {
            console.log();
            console.log('The app is running at:');
            console.log();
            console.log('  ' + chalk.cyan(protocol + '://' + host + ':' + port + '/'));
            console.log();
            console.log('Note that the development build is not optimized.');
            console.log('To create a production build, use ' + chalk.cyan('npm run build') + '.');
            console.log();
            isFirstCompile = false;
        }

        if (messages.errors.length) {
            console.log(chalk.red('Failed to compile.'));
            console.log();
            messages.errors.forEach(message => {
                console.log(message);
                console.log();
            });
            return;
        }

        if (messages.warnings.length) {
            console.log(chalk.yellow('Compiled with warnings.'));
            console.log();
            messages.warnings.forEach(message => {
                console.log(message);
                console.log();
            });
            // Teach some ESLint tricks.
            console.log('You may use special comments to disable some warnings.');
            console.log('Use ' + chalk.yellow('// eslint-disable-next-line') + ' to ignore the next line.');
            console.log('Use ' + chalk.yellow('/* eslint-disable */') + ' to ignore all warnings in a file.');
        }
    });
}

function addMiddleware(devServer) {

    var proxy = require('../package.json').proxy;
    devServer.use(historyApiFallback({
        disableDotRule: true,
        htmlAcceptHeaders: proxy ? ['text/html'] : ['text/html', '*/*']
    }));
    if (proxy) {
        if (typeof proxy !== 'string') {
            console.log(chalk.red('When specified, "proxy" in package.json must be a string.'));
            console.log(chalk.red('Instead, the type of "proxy" was "' + typeof proxy + '".'));
            console.log(chalk.red('Either remove "proxy" from package.json, or make it a string.'));
            process.exit(1);
        }

        var mayProxy = /^(?!\/(index\.html$|.*\.hot-update\.json$|sockjs-node\/)).*$/;

        var hpm = httpProxyMiddleware(pathname => mayProxy.test(pathname), {
            target: proxy,
            logLevel: 'silent',
            onProxyReq: function(proxyReq) {
                if (proxyReq.getHeader('origin')) {
                    proxyReq.setHeader('origin', proxy);
                }
            },
            onError: onProxyError(proxy),
            secure: false,
            changeOrigin: true,
            ws: true,
            xfwd: true
        });
        devServer.use(mayProxy, hpm);

        devServer.listeningApp.on('upgrade', hpm.upgrade);
    }
    devServer.use(devServer.middleware);
}

function onProxyError(proxy) {
    return function(err, req, res) {
        var host = req.headers && req.headers.host;
        console.log(
            chalk.red('Proxy error:') + ' Could not proxy request ' + chalk.cyan(req.url) +
            ' from ' + chalk.cyan(host) + ' to ' + chalk.cyan(proxy) + '.'
        );
        console.log(
            'See https://nodejs.org/api/errors.html#errors_common_system_errors for more information (' +
            chalk.cyan(err.code) + ').'
        );
        console.log();

        // And immediately send the proper error response to the client.
        // Otherwise, the request will eventually timeout with ERR_EMPTY_RESPONSE on the client side.
        if (res.writeHead && !res.headersSent) {
            res.writeHead(500);
        }
        res.end('Proxy error: Could not proxy request ' + req.url + ' from ' +
            host + ' to ' + proxy + ' (' + err.code + ').'
        );
    }
}

function runDevServer(host, port, protocol) {

    var devServer = new WebpackDevServer(compiler, devServerConfig);

    addMiddleware(devServer);

    devServer.listen(port, err => {

        if (err) {
            return console.log(err);
        }

        if (process.stdout.isTTY) {
            cleanConsole();
        }
        console.log(chalk.cyan('Starting the development server...'));
        console.log();

        // openBrowser(protocol + '://' + host + ':' + port + '/');
    });
}