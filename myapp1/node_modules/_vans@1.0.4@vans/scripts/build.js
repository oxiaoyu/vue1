'use strict';
const chalk = require('chalk');
const webpack = require('webpack');
const formatWebpackMessages = require('./tools/formatWebpackMessages');
const cleanConsole = require('./tools/cleanConsole');
const printBuildError = require('./tools/printBuildError');
const FileSizeReporter = require('./tools/filesizeReporter');
const paths = require('./tools/paths');
const measureFileSizesBeforeBuild = FileSizeReporter.measureFileSizesBeforeBuild;
const printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;

const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;

process.env.NODE_ENV = 'production';

let config = require('../config/webpack.config.dev');

function build(previousFileSize) {

    let compiler = webpack(config);
    return new Promise((resolve, reject) => {
        compiler.run((err, stats) => {
            if (err) {
                return reject(err);
            }
            const message = formatWebpackMessages(stats.toJson({}, true));
            if (message.errors.length) {
                if (message.errors.length > 1) {
                    message.errors.length = 1;
                }
                return reject(new Error(message.errors.join('\n\n')));
            }


            return resolve({
                stats,
                previousFileSize,
                warnings: message.warnings
            })
        });
    });
}

//cleanConsole();

measureFileSizesBeforeBuild(paths.appPath).then((previousFileSize) => {
    return build(previousFileSize);
}).then((opt) => {
    let stats = opt.stats;
    let previousFileSize = opt.previousFileSize;
    let warnings = opt.warnings;
    if (warnings && warnings.length) {
        console.log(chalk.yellow('Compiled with warnings.\n'));
        console.log(warnings.join('\n\n'));
        console.log(
            '\nsearch for the ' + chalk.underline(chalk.yellow('keywords')) + ' to learn more about each warning'
        );
        console.log('To ignore, add ' + chalk.cyan('// eslint-disable-next-line') + ' to the line before.\n');
    } else {
        console.log(chalk.green('Compiled successfully.\n'));
    }

    console.log('File sizes after gzip:\n');

    printFileSizesAfterBuild(
        stats,
        previousFileSize,
        paths.appPath,
        WARN_AFTER_BUNDLE_GZIP_SIZE,
        WARN_AFTER_CHUNK_GZIP_SIZE
    );

}, err => {
    console.log(chalk.red('Failed to compile.\n'));
    printBuildError(err);
    process.exit(1);
});