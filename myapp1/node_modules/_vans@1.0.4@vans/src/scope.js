'use strict';
import {
    each
} from 'taujs';

function initWatchValue() {

}
export default class Scope {

    constructor() {
        this._watchers = [];
        this._lastDirtyWatch = null;
    }

    watch(watchFn, listenerFn = () => {}) {
        const watcher = {
            watchFn,
            listenerFn,
            last: initWatchValue
        };
        this._watchers.push(watcher);
    }

    digest() {
        let ttl = 10;
        let dirty;
        this._lastDirtyWatch = null;
        do {
            dirty = this._digestOnce();
            if (dirty && !(ttl--)) {
                throw 'digest超过10次'
            }
        } while (dirty);
    }

    _digestOnce() {
        let newValue;
        let oldValue;
        let dirty;
        each(this._watchers, (watcher) => {
            newValue = watcher.watchFn(this);
            oldValue = watcher.last;

            if (newValue !== oldValue) {
                this._lastDirtyWatch = watcher;
                watcher.last = newValue;
                watcher.listenerFn(
                    newValue,
                    oldValue === initWatchValue ? newValue : oldValue,
                    this);
                dirty = true;
            } else if (this._lastDirtyWatch === watcher) {
                return false;
            }
        });
        return dirty;
    }
}